# telegram_bot.py
import os
import logging
import shutil
import requests
from datetime import datetime
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.error import BadRequest
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    CommandHandler,
    ConversationHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# -------------------------------------------
# Conversation State Definitions
# -------------------------------------------
LOGIN_EMAIL = 0
LOGIN_PASSWORD = 1
TASK_SELECTION = 2
WAIT_START = 3
WAIT_CHECKIN_PHOTO = 4
WAIT_CONFIRM_CHECKIN = 5
WAIT_FINISH = 6
WAIT_CHECKOUT_PHOTO = 7
WAIT_CONFIRM_CHECKOUT = 8
MAIN_MENU = 100

# -------------------------------------------
# Global Configuration & API URLs
# -------------------------------------------
API_LOGIN_URL = os.getenv("API_LOGIN_URL", "http://web:8000/auth/login")
API_CHECK_EMAIL_URL = os.getenv("API_CHECK_EMAIL_URL", "http://web:8000/auth/check_email")
API_GET_TASKS_URL = os.getenv("API_GET_TASKS_URL", "http://web:8000")
API_DAILY_ENTRY_URL = os.getenv("API_DAILY_ENTRY_URL", "http://web:8000/data/daily-entry")
API_DAILY_ENTRY_TODAY_URL = os.getenv("API_DAILY_ENTRY_TODAY_URL", "http://web:8000/data/daily-entry/today")
BOT_TOKEN = os.getenv("BOT_TOKEN", "8103489251:AAEw30I0rifou8Ehx_Du2R_TCLEzA6w_Sbk")

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# -------------------------------------------
# Translations Dictionary (including new "photo_sent" key)
# -------------------------------------------
translations = {
    "en": {
        "welcome": "üåê *Welcome!* Please choose your language:",
        "login": "üîê Login",
        "logout": "Log Out",
        "enter_daily": "Enter Daily Entry",
        "email_prompt": "Please enter your email:",
        "email_not_found": "This email doesn't exist. Please enter a valid email:",
        "password_prompt": "Now, please enter your password:",
        "login_success": "Login successful! Welcome {email}. Your role is: {role}",
        "login_failed": "Login failed. Please try again.",
        "daily_already": "You have already submitted your daily entry for today.",
        "task_prompt": "Please select the task you will perform today:",
        "start_button": "Start",
        "finish_button": "Finish",
        "checkin_prompt": "Please send your check‚Äëin photo:",
        "checkout_prompt": "Please send your check‚Äëout photo:",
        "confirm_photo": "Is this the photo you want to send?",
        "yes": "Yes",
        "no": "No",
        "cancel": "Cancel",
        "please_send_photo": "Please send a photo.",
        "please_send_new_checkin": "Please send a new check‚Äëin photo.",
        "please_send_new_checkout": "Please send a new check‚Äëout photo.",
        "submission_success": "Thank you! Your daily entry has been submitted successfully.",
        "submission_error": "Error submitting daily entry. Please try again.",
        "photo_sent": "Photo sent",  # <-- New translation key
    },
    "ru": {
        "welcome": "üåê *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!* –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "login": "üîê –í–æ–π—Ç–∏",
        "logout": "–í—ã–π—Ç–∏",
        "enter_daily": "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç",
        "email_prompt": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É:",
        "email_not_found": "–¢–∞–∫–æ–π email –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤—É—é—â–∏–π email:",
        "password_prompt": "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:",
        "login_success": "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {email}. –í–∞—à–∞ —Ä–æ–ª—å: {role}",
        "login_failed": "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        "daily_already": "–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–≤–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.",
        "task_prompt": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã –±—É–¥–µ—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å —Å–µ–≥–æ–¥–Ω—è:",
        "start_button": "–ù–∞—á–∞—Ç—å",
        "finish_button": "–ó–∞–∫–æ–Ω—á–∏—Ç—å",
        "checkin_prompt": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–∏ –≤—Ö–æ–¥–µ:",
        "checkout_prompt": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:",
        "confirm_photo": "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —ç—Ç–æ –Ω—É–∂–Ω–æ–µ —Ñ–æ—Ç–æ?",
        "yes": "–î–∞",
        "no": "–ù–µ—Ç",
        "cancel": "–û—Ç–º–µ–Ω–∞",
        "please_send_photo": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.",
        "please_send_new_checkin": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –ø—Ä–∏ –≤—Ö–æ–¥–µ.",
        "please_send_new_checkout": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ.",
        "submission_success": "–°–ø–∞—Å–∏–±–æ! –í–∞—à –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.",
        "submission_error": "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        "photo_sent": "–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
    },
    "ky": {
        "welcome": "üåê *–ö–æ—à –∫–µ–ª–∏“£–∏–∑!* –°—É—Ä–∞–Ω—ã—á, —Ç–∏–ª–∏“£–∏–∑–¥–∏ —Ç–∞–Ω–¥–∞“£—ã–∑:",
        "login": "üîê –ö–∏—Ä“Ø“Ø",
        "logout": "–ß—ã–≥—É—É",
        "enter_daily": "–ö“Ø–Ω“Ø–º–¥“Ø–∫ –æ—Ç—á–µ—Ç—Ç—É –∂”©–Ω”©—Ç“Ø“Ø",
        "email_prompt": "–°—É—Ä–∞–Ω—ã—á, —ç–ª–µ–∫—Ç—Ä–æ–Ω–¥—É–∫ –ø–æ—á—Ç–∞“£—ã–∑–¥—ã –∂–∞–∑—ã“£—ã–∑:",
        "email_not_found": "–ú—ã–Ω–¥–∞–π email –∂–æ–∫. –°—É—Ä–∞–Ω—ã—á, —Ç—É—É—Ä–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–¥—É–∫ –ø–æ—á—Ç–∞“£—ã–∑–¥—ã –∂–∞–∑—ã“£—ã–∑:",
        "password_prompt": "–≠–º–∏ —Å—ã—Ä—Å”©–∑“Ø“£“Ø–∑–¥“Ø –∂–∞–∑—ã“£—ã–∑:",
        "login_success": "–ö–∏—Ä“Ø“Ø –∏–π–≥–∏–ª–∏–∫—Ç“Ø“Ø –±–æ–ª–¥—É! {email} –∫–æ—à –∫–µ–ª–∏“£–∏–∑. –°–∏–∑–¥–∏–Ω —Ä–æ–ª—É“£—É–∑: {role}",
        "login_failed": "–ö–∏—Ä“Ø“Ø —É—á—É—Ä—É–Ω–¥–∞ –∫–∞—Ç–∞. –ö–∞–π—Ä–∞ –∞—Ä–∞–∫–µ—Ç –∫—ã–ª—ã“£—ã–∑.",
        "daily_already": "–°–∏–∑ –±“Ø–≥“Ø–Ω –∫“Ø–Ω“Ø–º–¥“Ø–∫ –æ—Ç—á–µ—Ç—Ç—É –∂”©–Ω”©—Ç“Ø–ø –∞–ª–¥—ã“£—ã–∑.",
        "task_prompt": "–°—É—Ä–∞–Ω—ã—á, –±“Ø–≥“Ø–Ω –∞—Ç–∫–∞—Ä–º–∞–∫—á—ã –±–æ–ª–≥–æ–Ω —Ç–∞–ø—à—ã—Ä–º–∞–Ω—ã —Ç–∞–Ω–¥–∞“£—ã–∑:",
        "start_button": "–ë–∞—à—Ç–æ–æ",
        "finish_button": "–ê—è–∫—Ç–æ–æ",
        "checkin_prompt": "–°—É—Ä–∞–Ω—ã—á, –∫–∏—Ä“Ø“Ø “Ø—á“Ø–Ω —Ñ–æ—Ç–æ –∂–∏–±–µ—Ä–∏–Ω–∏–∑:",
        "checkout_prompt": "–°—É—Ä–∞–Ω—ã—á, —á—ã–≥—É—É “Ø—á“Ø–Ω —Ñ–æ—Ç–æ –∂–∏–±–µ—Ä–∏–Ω–∏–∑:",
        "confirm_photo": "–ë—É–ª —Å–∏–∑ –∂”©–Ω”©—Ç“Ø“Ø—á“Ø —Ñ–æ—Ç–æ —ç–∫–µ–Ω–∏–Ω–µ –∏—à–µ–Ω–µ—Å–∏–∑–±–∏?",
        "yes": "–û–æ–±–∞",
        "no": "–ñ–æ–∫",
        "cancel": "–ë–∞—à —Ç–∞—Ä—Ç—É—É",
        "please_send_photo": "–°—É—Ä–∞–Ω—ã—á, —Ñ–æ—Ç–æ –∂–∏–±–µ—Ä–∏“£–∏–∑.",
        "please_send_new_checkin": "–°—É—Ä–∞–Ω—ã—á, –∫–∏—Ä“Ø“Ø “Ø—á“Ø–Ω –∂–∞“£—ã —Ñ–æ—Ç–æ –∂–∏–±–µ—Ä–∏–Ω–∏–∑.",
        "please_send_new_checkout": "–°—É—Ä–∞–Ω—ã—á, —á—ã–≥—É—É “Ø—á“Ø–Ω –∂–∞“£—ã —Ñ–æ—Ç–æ –∂–∏–±–µ—Ä–∏–Ω–∏–∑.",
        "submission_success": "–†–∞—Ö–º–∞—Ç! –°–∏–∑–¥–∏–Ω –∫“Ø–Ω“Ø–º–¥“Ø–∫ –æ—Ç—á–µ—Ç –∏–π–≥–∏–ª–∏–∫—Ç“Ø“Ø –∂”©–Ω”©—Ç“Ø–ª–¥“Ø.",
        "submission_error": "–ö–∞—Ç–∞, –∫“Ø–Ω“Ø–º–¥“Ø–∫ –æ—Ç—á–µ—Ç –∂”©–Ω”©—Ç“Ø–ª–≥”©–Ω –∂–æ–∫. –ö–∞–π—Ä–∞ –∞—Ä–∞–∫–µ—Ç –∫—ã–ª—ã“£—ã–∑.",
        "photo_sent": "–§–æ—Ç–æ –∂”©–Ω”©—Ç“Ø–ª–¥“Ø",
    },
    "kk": {
        "welcome": "üåê *“ö–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑!* –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:",
        "login": "üîê –ö—ñ—Ä—É",
        "logout": "–®—ã“ì—É",
        "enter_daily": "–ö“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ –µ—Å–µ–ø—Ç—ñ –µ–Ω–≥—ñ–∑—É",
        "email_prompt": "”®—Ç—ñ–Ω–µ–º—ñ–∑, —ç–ª–µ–∫—Ç—Ä–æ–Ω–¥—ã“õ –ø–æ—à—Ç–∞“£—ã–∑–¥—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:",
        "email_not_found": "–ú“±–Ω–¥–∞–π email –∂–æ“õ. ”®—Ç—ñ–Ω–µ–º—ñ–∑, –¥“±—Ä—ã—Å email –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:",
        "password_prompt": "–ï–Ω–¥—ñ, “õ“±–ø–∏—è —Å”©–∑—ñ“£—ñ–∑–¥—ñ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:",
        "login_success": "–ö—ñ—Ä—É —Å”ô—Ç—Ç—ñ –±–æ–ª–¥—ã! {email} “õ–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑. –°—ñ–∑–¥—ñ“£ —Ä”©–ª—ñ“£—ñ–∑: {role}",
        "login_failed": "–ö—ñ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –∫–µ—Ç—Ç—ñ. “ö–∞–π—Ç–∞ –∫”©—Ä—ñ“£—ñ–∑.",
        "daily_already": "–°—ñ–∑ –±“Ø–≥—ñ–Ω –∫“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ –µ—Å–µ–ø—Ç—ñ –µ–Ω–≥—ñ–∑—ñ–ø “õ–æ–π–¥—ã“£—ã–∑.",
        "task_prompt": "–ë“Ø–≥—ñ–Ω –æ—Ä—ã–Ω–¥–∞—É—ã“£—ã–∑ “õ–∞–∂–µ—Ç —Ç–∞–ø—Å—ã—Ä–º–∞–Ω—ã —Ç–∞“£–¥–∞“£—ã–∑:",
        "start_button": "–ë–∞—Å—Ç–∞—É",
        "finish_button": "–ê—è“õ—Ç–∞—É",
        "checkin_prompt": "”®—Ç—ñ–Ω–µ–º—ñ–∑, –∫—ñ—Ä–≥–µ–Ω –∫–µ–∑–¥–µ–≥—ñ —Ñ–æ—Ç–æ–Ω—ã –∂—ñ–±–µ—Ä—ñ“£—ñ–∑:",
        "checkout_prompt": "”®—Ç—ñ–Ω–µ–º—ñ–∑, —à—ã“õ“õ–∞–Ω –∫–µ–∑–¥–µ–≥—ñ —Ñ–æ—Ç–æ–Ω—ã –∂—ñ–±–µ—Ä—ñ“£—ñ–∑:",
        "confirm_photo": "–ë“±–ª —Å—ñ–∑ –∂—ñ–±–µ—Ä–≥—ñ“£—ñ–∑ –∫–µ–ª–µ—Ç—ñ–Ω —Ñ–æ—Ç–æ –µ–∫–µ–Ω—ñ–Ω–µ —Å–µ–Ω–µ—Å—ñ–∑ –±–µ?",
        "yes": "–ò”ô",
        "no": "–ñ–æ“õ",
        "cancel": "–ë–∞—Å —Ç–∞—Ä—Ç—É",
        "please_send_photo": "”®—Ç—ñ–Ω–µ–º—ñ–∑, —Ñ–æ—Ç–æ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑.",
        "please_send_new_checkin": "”®—Ç—ñ–Ω–µ–º—ñ–∑, –∫—ñ—Ä–≥–µ–Ω –∫–µ–∑–¥–µ–≥—ñ –∂–∞“£–∞ —Ñ–æ—Ç–æ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑.",
        "please_send_new_checkout": "”®—Ç—ñ–Ω–µ–º—ñ–∑, —à—ã“õ“õ–∞–Ω –∫–µ–∑–¥–µ–≥—ñ –∂–∞“£–∞ —Ñ–æ—Ç–æ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑.",
        "submission_success": "–†–∞“õ–º–µ—Ç! –ö“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ –µ—Å–µ–ø —Å”ô—Ç—Ç—ñ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ.",
        "submission_error": "–ö“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ –µ—Å–µ–ø –∂—ñ–±–µ—Ä—ñ–ª–≥–µ–Ω –∂–æ“õ. ”®—Ç—ñ–Ω–µ–º—ñ–∑, “õ–∞–π—Ç–∞ –∫”©—Ä—ñ“£—ñ–∑.",
        "photo_sent": "–§–æ—Ç–æ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ",
    },
}
LANG_CODES = ["en", "ru", "ky", "kk"]

# -------------------------------------------
# Helper Function: Escape Markdown (v2)
# -------------------------------------------
def escape_markdown_v2(text: str) -> str:
    reserved_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for char in reserved_chars:
        text = text.replace(char, f"\\{char}")
    return text

# -------------------------------------------
# Command Handlers
# -------------------------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("English", callback_data="en"),
         InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data="ru")],
        [InlineKeyboardButton("Kyrgyz", callback_data="ky"),
         InlineKeyboardButton("“ö–∞–∑–∞“õ—à–∞", callback_data="kk")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    welcome_text = escape_markdown_v2(translations["en"]["welcome"])
    await update.message.reply_text(
        welcome_text,
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN_V2,
    )

async def main_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    try:
        await query.answer()
    except BadRequest as e:
        logger.warning("Callback query answer failed: %s", e)
    data = query.data
    if data in LANG_CODES:
        context.user_data["language"] = data
        lang = data
        keyboard = [
            [InlineKeyboardButton(translations[lang]["login"], callback_data="login")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        text = f"*{lang.upper()} Selected*\\\n\\\nPlease login to continue:"
        try:
            await query.edit_message_text(
                text=escape_markdown_v2(text),
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN_V2,
            )
        except BadRequest:
            await query.message.reply_text(
                text=escape_markdown_v2(text),
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN_V2,
            )
    elif data == "logout":
        context.user_data.clear()
        keyboard = [
            [InlineKeyboardButton("English", callback_data="en"),
             InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data="ru")],
            [InlineKeyboardButton("Kyrgyz", callback_data="ky"),
             InlineKeyboardButton("“ö–∞–∑–∞“õ—à–∞", callback_data="kk")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        try:
            await query.edit_message_text(
                text=escape_markdown_v2(translations["en"]["welcome"]),
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN_V2,
            )
        except BadRequest:
            await query.message.reply_text(
                text=escape_markdown_v2(translations["en"]["welcome"]),
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN_V2,
            )

async def conversation_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    lang = context.user_data.get("language", "en")
    if "user_id" not in context.user_data:
        context.user_data.clear()
        keyboard = [
            [InlineKeyboardButton("English", callback_data="en"),
             InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data="ru")],
            [InlineKeyboardButton("Kyrgyz", callback_data="ky"),
             InlineKeyboardButton("“ö–∞–∑–∞“õ—à–∞", callback_data="kk")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        if update.callback_query:
            try:
                await update.callback_query.message.edit_text(
                    text=escape_markdown_v2(translations["en"]["welcome"]),
                    reply_markup=reply_markup,
                    parse_mode=ParseMode.MARKDOWN_V2,
                )
            except BadRequest as e:
                logger.warning("Editing message failed in conversation_cancel: %s", e)
        else:
            await update.message.reply_text(
                text=escape_markdown_v2(translations["en"]["welcome"]),
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN_V2,
            )
    else:
        await show_logged_in_menu(update, context)
    return ConversationHandler.END

# -------------------------------------------
# Login Conversation Handlers
# -------------------------------------------
async def login_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    try:
        await query.answer()
    except BadRequest as e:
        logger.warning("Callback query answer failed in login_start: %s", e)
    lang = context.user_data.get("language", "en")
    keyboard = [[InlineKeyboardButton(translations[lang]["cancel"], callback_data="cancel_conversation")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text=escape_markdown_v2(translations[lang]["email_prompt"]),
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN_V2,
    )
    return LOGIN_EMAIL

async def email_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    lang = context.user_data.get("language", "en")
    email = update.message.text.strip()
    if email.lower() == "cancel":
        return await conversation_cancel(update, context)
    try:
        response = requests.post(API_CHECK_EMAIL_URL, json={"email": email})
        if response.status_code == 422:
            result = {"exists": False}
        else:
            response.raise_for_status()
            result = response.json()
        if not result.get("exists", False):
            await update.message.reply_text(
                text=escape_markdown_v2(translations[lang]["email_not_found"]),
                parse_mode=ParseMode.MARKDOWN_V2,
            )
            keyboard = [[InlineKeyboardButton(translations[lang]["cancel"], callback_data="cancel_conversation")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                text=escape_markdown_v2(translations[lang]["email_prompt"]),
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN_V2,
            )
            return LOGIN_EMAIL
    except Exception as e:
        logger.error("Error checking email existence: %s", e)
        await update.message.reply_text("An error occurred while checking the email. Please try again.")
        return LOGIN_EMAIL
    context.user_data["email"] = email
    keyboard = [[InlineKeyboardButton(translations[lang]["cancel"], callback_data="cancel_conversation")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        text=escape_markdown_v2(translations[lang]["password_prompt"]),
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN_V2,
    )
    return LOGIN_PASSWORD

async def password_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    lang = context.user_data.get("language", "en")
    password = update.message.text.strip()
    if password.lower() == "cancel":
        return await conversation_cancel(update, context)
    try:
        await update.message.delete()
    except Exception as e:
        logger.error("Error deleting password message: %s", e)
    email = context.user_data.get("email", "")
    data = {"email": email, "password": password}
    try:
        response = requests.post(API_LOGIN_URL, json=data)
        response.raise_for_status()
        user_info = response.json()
        context.user_data["role"] = user_info.get("role", "unknown")
        context.user_data["user_id"] = user_info.get("user_id")
        context.user_data["project_id"] = user_info.get("project_id")
        success_text = translations[lang]["login_success"].format(
            email=user_info.get("email", email),
            role=user_info.get("role", "unknown")
        )
        await update.message.reply_text(
            text=escape_markdown_v2(success_text),
            parse_mode=ParseMode.MARKDOWN_V2,
        )
    except Exception as e:
        logger.error("Login error: %s", e)
        await update.message.reply_text(
            text=escape_markdown_v2(translations[lang]["login_failed"]),
            parse_mode=ParseMode.MARKDOWN_V2,
        )
        return LOGIN_PASSWORD
    return await show_logged_in_menu(update, context)

# -------------------------------------------
# Logged-in Main Menu Handler
# -------------------------------------------
async def show_logged_in_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    lang = context.user_data.get("language", "en")
    user_id = context.user_data.get("user_id")
    email = context.user_data.get("email", "User")
    role = context.user_data.get("role", "unknown")
    try:
        response = requests.get(API_DAILY_ENTRY_TODAY_URL, params={"user_id": user_id})
        response.raise_for_status()
        result = response.json()
    except Exception as e:
        logger.error("Error checking daily entry for today: %s", e)
        result = {"exists": False}
    if result.get("exists", False):
        text = translations[lang]["login_success"].format(email=email, role=role) + "\n\n" + translations[lang]["daily_already"]
        keyboard = [
            [InlineKeyboardButton(translations[lang]["logout"], callback_data="logout")]
        ]
    else:
        text = translations[lang]["login_success"].format(email=email, role=role)
        keyboard = [
            [InlineKeyboardButton(translations[lang]["enter_daily"], callback_data="enter_daily_entry")],
            [InlineKeyboardButton(translations[lang]["logout"], callback_data="logout")]
        ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.callback_query:
        try:
            await update.callback_query.message.edit_text(
                text=escape_markdown_v2(text),
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN_V2,
            )
        except BadRequest as e:
            logger.warning("Editing message in show_logged_in_menu failed: %s", e)
            await update.callback_query.message.reply_text(
                text=escape_markdown_v2(text),
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN_V2,
            )
    else:
        await update.message.reply_text(
            text=escape_markdown_v2(text),
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN_V2,
        )
    return MAIN_MENU

# -------------------------------------------
# Daily Entry Conversation Handlers
# -------------------------------------------
async def enter_daily_entry_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    return await show_task_selection(update, context)

async def logout_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.clear()
    keyboard = [
        [InlineKeyboardButton("English", callback_data="en"),
         InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data="ru")],
        [InlineKeyboardButton("Kyrgyz", callback_data="ky"),
         InlineKeyboardButton("“ö–∞–∑–∞“õ—à–∞", callback_data="kk")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    try:
        await update.callback_query.message.edit_text(
            text=escape_markdown_v2(translations["en"]["welcome"]),
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN_V2,
        )
    except BadRequest as e:
        logger.warning("Editing message in logout_handler failed: %s", e)
        await update.callback_query.message.reply_text(
            text=escape_markdown_v2(translations["en"]["welcome"]),
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN_V2,
        )
    return ConversationHandler.END

async def show_task_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    lang = context.user_data.get("language", "en")
    project_id = context.user_data.get("project_id")
    if not project_id:
        await update.message.reply_text("No project assigned. Contact admin.")
        return ConversationHandler.END
    try:
        url = f"{API_GET_TASKS_URL}/projects/{project_id}/tasks"
        response = requests.get(url)
        response.raise_for_status()
        tasks = response.json()
    except Exception as e:
        logger.error("Error fetching tasks: %s", e)
        await update.message.reply_text("Error fetching tasks. Please try again later.")
        return ConversationHandler.END
    if not tasks:
        await update.message.reply_text("No tasks found for your project.")
        return ConversationHandler.END
    keyboard = []
    for task in tasks:
        keyboard.append([InlineKeyboardButton(task["name"], callback_data=f"task_{task['id']}")])
    keyboard.append([InlineKeyboardButton(translations[lang]["cancel"], callback_data="cancel_conversation")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    prompt = translations[lang]["task_prompt"]
    if update.message:
        await update.message.reply_text(
            text=escape_markdown_v2(prompt),
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN_V2,
        )
    else:
        await update.callback_query.message.reply_text(
            text=escape_markdown_v2(prompt),
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN_V2,
        )
    return TASK_SELECTION

async def task_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    try:
        await query.answer()
    except BadRequest as e:
        logger.warning("Callback query answer failed in task_selected: %s", e)
    data = query.data
    lang = context.user_data.get("language", "en")
    if data.startswith("task_"):
        task_id = int(data.split("_")[1])
        context.user_data["task_id"] = task_id
        keyboard = [
            [InlineKeyboardButton(translations[lang]["start_button"], callback_data="start_task")],
            [InlineKeyboardButton(translations[lang]["cancel"], callback_data="cancel_conversation")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            text=escape_markdown_v2(translations[lang]["start_button"]),
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN_V2,
        )
        return WAIT_START
    elif data == "cancel_conversation":
        return await conversation_cancel(update, context)
    return TASK_SELECTION

async def start_task_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    try:
        await query.answer()
    except BadRequest as e:
        logger.warning("Callback query answer failed in start_task_handler: %s", e)
    context.user_data["start_time"] = datetime.utcnow().isoformat()
    lang = context.user_data.get("language", "en")
    keyboard = [
        [InlineKeyboardButton(translations[lang]["cancel"], callback_data="cancel_conversation")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        text=escape_markdown_v2(translations[lang]["checkin_prompt"]),
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN_V2,
    )
    return WAIT_CHECKIN_PHOTO

async def checkin_photo_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    lang = context.user_data.get("language", "en")
    if not update.message.photo:
        await update.message.reply_text(translations[lang]["please_send_photo"])
        return WAIT_CHECKIN_PHOTO
    photo = update.message.photo[-1]
    file = await photo.get_file()
    os.makedirs("photos", exist_ok=True)
    file_path = f"photos/temp_checkin_{file.file_id}.jpg"
    await file.download_to_drive(file_path)
    context.user_data["temp_check_in_photo"] = file_path
    keyboard = [
        [InlineKeyboardButton(translations[lang]["yes"], callback_data="confirm_checkin_yes"),
         InlineKeyboardButton(translations[lang]["no"], callback_data="confirm_checkin_no")],
        [InlineKeyboardButton(translations[lang]["cancel"], callback_data="cancel_conversation")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_photo(
        photo=open(file_path, "rb"),
        caption=escape_markdown_v2(translations[lang]["confirm_photo"]),
        parse_mode=ParseMode.MARKDOWN_V2,
        reply_markup=reply_markup,
    )
    return WAIT_CONFIRM_CHECKIN

async def confirm_checkin_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    try:
        await query.answer()
    except BadRequest as e:
        logger.warning("Callback query answer failed in confirm_checkin_handler: %s", e)
    data = query.data
    lang = context.user_data.get("language", "en")
    if data == "confirm_checkin_yes":
        temp_path = context.user_data.get("temp_check_in_photo")
        if temp_path:
            permanent_path = temp_path.replace("temp_", "")
            shutil.move(temp_path, permanent_path)
            context.user_data["check_in_photo"] = permanent_path
        context.user_data.pop("temp_check_in_photo", None)
        keyboard = [
            [InlineKeyboardButton(translations[lang]["finish_button"], callback_data="finish_task")],
            [InlineKeyboardButton(translations[lang]["cancel"], callback_data="cancel_conversation")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        # Update caption to say "Photo sent" rather than the finish button text.
        await query.edit_message_caption(
            caption=escape_markdown_v2(translations[lang]["photo_sent"]),
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN_V2,
        )
        return WAIT_FINISH
    elif data == "confirm_checkin_no":
        temp_path = context.user_data.get("temp_check_in_photo")
        if temp_path and os.path.exists(temp_path):
            os.remove(temp_path)
        context.user_data.pop("temp_check_in_photo", None)
        await query.edit_message_caption(
            caption=escape_markdown_v2(translations[lang]["please_send_new_checkin"]),
            parse_mode=ParseMode.MARKDOWN_V2,
        )
        return WAIT_CHECKIN_PHOTO

async def finish_task_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    try:
        await query.answer()
    except BadRequest as e:
        logger.warning("Callback query answer failed in finish_task_handler: %s", e)
    context.user_data["finish_time"] = datetime.utcnow().isoformat()
    lang = context.user_data.get("language", "en")
    keyboard = [
        [InlineKeyboardButton(translations[lang]["cancel"], callback_data="cancel_conversation")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if query.message.photo:
        try:
            await query.edit_message_caption(
                caption=escape_markdown_v2(translations[lang]["checkout_prompt"]),
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN_V2,
            )
        except BadRequest as e:
            logger.warning("Editing message caption failed in finish_task_handler: %s", e)
            await query.message.reply_text(
                text=escape_markdown_v2(translations[lang]["checkout_prompt"]),
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN_V2,
            )
    else:
        try:
            await query.edit_message_text(
                text=escape_markdown_v2(translations[lang]["checkout_prompt"]),
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN_V2,
            )
        except BadRequest as e:
            logger.warning("Editing message text failed in finish_task_handler: %s", e)
            await query.message.reply_text(
                text=escape_markdown_v2(translations[lang]["checkout_prompt"]),
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN_V2,
            )
    return WAIT_CHECKOUT_PHOTO

async def checkout_photo_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    lang = context.user_data.get("language", "en")
    if not update.message.photo:
        await update.message.reply_text(translations[lang]["please_send_photo"])
        return WAIT_CHECKOUT_PHOTO
    photo = update.message.photo[-1]
    file = await photo.get_file()
    os.makedirs("photos", exist_ok=True)
    file_path = f"photos/temp_checkout_{file.file_id}.jpg"
    await file.download_to_drive(file_path)
    context.user_data["temp_check_out_photo"] = file_path
    keyboard = [
        [InlineKeyboardButton(translations[lang]["yes"], callback_data="confirm_checkout_yes"),
         InlineKeyboardButton(translations[lang]["no"], callback_data="confirm_checkout_no")],
        [InlineKeyboardButton(translations[lang]["cancel"], callback_data="cancel_conversation")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_photo(
        photo=open(file_path, "rb"),
        caption=escape_markdown_v2(translations[lang]["confirm_photo"]),
        parse_mode=ParseMode.MARKDOWN_V2,
        reply_markup=reply_markup,
    )
    return WAIT_CONFIRM_CHECKOUT

async def confirm_checkout_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    try:
        await query.answer()
    except BadRequest as e:
        logger.warning("Callback query answer failed in confirm_checkout_handler: %s", e)
    data = query.data
    lang = context.user_data.get("language", "en")
    if data == "confirm_checkout_yes":
        temp_path = context.user_data.get("temp_check_out_photo")
        if temp_path:
            permanent_path = temp_path.replace("temp_", "")
            shutil.move(temp_path, permanent_path)
            context.user_data["check_out_photo"] = permanent_path
        context.user_data.pop("temp_check_out_photo", None)
        try:
            start_time = datetime.fromisoformat(context.user_data.get("start_time"))
            finish_time = datetime.fromisoformat(context.user_data.get("finish_time"))
            diff = finish_time - start_time
            hours_worked = diff.total_seconds() / 3600.0
        except Exception as e:
            logger.error("Error computing hours worked: %s", e)
            hours_worked = 0.0
        context.user_data["hours_worked"] = hours_worked
        payload = {
            "user_id": context.user_data.get("user_id"),
            "task_id": context.user_data.get("task_id"),
            "hours_worked": hours_worked,
            "start_time": context.user_data.get("start_time"),
            "finish_time": context.user_data.get("finish_time"),
        }
        files = {}
        if "check_in_photo" in context.user_data:
            files["check_in_photo"] = open(context.user_data["check_in_photo"], "rb")
        if "check_out_photo" in context.user_data:
            files["check_out_photo"] = open(context.user_data["check_out_photo"], "rb")
        try:
            response = requests.post(API_DAILY_ENTRY_URL, data=payload, files=files)
            response.raise_for_status()
            await query.message.reply_text(
                text=escape_markdown_v2(translations[lang]["submission_success"]),
                parse_mode=ParseMode.MARKDOWN_V2,
            )
        except Exception as e:
            logger.error("Error submitting daily entry: %s", e)
            await query.message.reply_text(translations[lang]["submission_error"])
        return await show_logged_in_menu(update, context)
    elif data == "confirm_checkout_no":
        temp_path = context.user_data.get("temp_check_out_photo")
        if temp_path and os.path.exists(temp_path):
            os.remove(temp_path)
        context.user_data.pop("temp_check_out_photo", None)
        await query.edit_message_caption(
            caption=escape_markdown_v2(translations[lang]["please_send_new_checkout"]),
            parse_mode=ParseMode.MARKDOWN_V2,
        )
        return WAIT_CHECKOUT_PHOTO

# -------------------------------------------
# Main function
# -------------------------------------------
def main() -> None:
    application = Application.builder().token(BOT_TOKEN).build()
    conv_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(login_start, pattern="^login$"),
            CallbackQueryHandler(enter_daily_entry_handler, pattern="^enter_daily_entry$")
        ],
        states={
            LOGIN_EMAIL: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, email_received),
                CallbackQueryHandler(conversation_cancel, pattern="^cancel_conversation$")
            ],
            LOGIN_PASSWORD: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, password_received),
                CallbackQueryHandler(conversation_cancel, pattern="^cancel_conversation$")
            ],
            TASK_SELECTION: [
                CallbackQueryHandler(task_selected, pattern="^task_"),
                CallbackQueryHandler(conversation_cancel, pattern="^cancel_conversation$")
            ],
            WAIT_START: [
                CallbackQueryHandler(start_task_handler, pattern="^start_task$"),
                CallbackQueryHandler(conversation_cancel, pattern="^cancel_conversation$")
            ],
            WAIT_CHECKIN_PHOTO: [
                MessageHandler(filters.PHOTO, checkin_photo_received),
                CallbackQueryHandler(conversation_cancel, pattern="^cancel_conversation$")
            ],
            WAIT_CONFIRM_CHECKIN: [
                CallbackQueryHandler(confirm_checkin_handler, pattern="^confirm_checkin_")
            ],
            WAIT_FINISH: [
                CallbackQueryHandler(finish_task_handler, pattern="^finish_task$"),
                CallbackQueryHandler(conversation_cancel, pattern="^cancel_conversation$")
            ],
            WAIT_CHECKOUT_PHOTO: [
                MessageHandler(filters.PHOTO, checkout_photo_received),
                CallbackQueryHandler(conversation_cancel, pattern="^cancel_conversation$")
            ],
            WAIT_CONFIRM_CHECKOUT: [
                CallbackQueryHandler(confirm_checkout_handler, pattern="^confirm_checkout_")
            ],
            MAIN_MENU: [
                CallbackQueryHandler(enter_daily_entry_handler, pattern="^enter_daily_entry$"),
                CallbackQueryHandler(logout_handler, pattern="^logout$")
            ],
        },
        fallbacks=[CallbackQueryHandler(conversation_cancel, pattern="^cancel_conversation$")],
        allow_reentry=True  # <-- Allow re‚Äëentry after conversation end.
    )
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(main_menu_handler, pattern="^(en|ru|ky|kk|logout)$"))
    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == "__main__":
    main()
